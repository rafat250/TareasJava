package actividades.de.clase;
import java.lang.reflect.Method;


public class Baraja {
    
    private Cartas cartas[];
    private int posSiguienteCarta;
    
    public static final int NUM_CARTAS=40;
    
    public Baraja() {
        this.cartas = new Cartas[NUM_CARTAS];
        this.posSiguienteCarta=0;
        
    }
    
    private void crearBaraja() {
        String[] palos = Cartas.Palos;
        
        for (int i=0;i<palos.length;i++) {
            
            for (int j=0;j<Cartas.LIMITE_CARTA_PALO;j++){
                
                if (!(j == 7 || j == 8)){
                    if (j>=9){
                        cartas[((i * (Cartas.LIMITE_CARTA_PALO - 2)) + (j-2))] = new Cartas(j+1, palos[i]);
                    }else{
                        cartas[((i * (Cartas.LIMITE_CARTA_PALO - 2)) + j)] = new Cartas(j+1, palos[i]);
                    }  
                }
            }  
        }
    }
    
    
    
    public void barajar () {
        int posAleatoria = 0;
        Cartas c;
        
        for(int i=0;i<cartas.length;i++) {
            
            posAleatoria = generaNumeroEnteroAleatorio(0,NUM_CARTAS -1);
            
            c = cartas[i];
            cartas[i] = cartas[posAleatoria];
            cartas[posAleatoria] = c;   
        } 
        
        this.posSiguienteCarta=0;
        
    }
    
    public Cartas siguienteCarta () {
        
        Cartas c = null;
        
        if (posSiguienteCarta == NUM_CARTAS ) {
            System.out.println("Ya no hay mas cartas, barajea de nuevo");   
        }else {
            c = cartas[posSiguienteCarta++];    
        }
        return null;
        
    }
    
    public Cartas[] darCartas (int numCartas) {
        if (numCartas > NUM_CARTAS) {
            System.out.println("No se puede dar mas cartas");
        }else {
            
            if (cartasDisponible() < numCartas) {
                System.out.println("No hay suficientes cartas que mostrar");
            }else {
                
                Cartas[] cartasDar = new Cartas[numCartas];
                for (int i=0;i<cartasDar.length;i++) {
                    cartasDar[i] = siguienteCarta();
                    
                }
                
                return cartas;
                
            }
            
        }
        return null;
    }
    
    public int cartasDisponible() {
        return NUM_CARTAS-posSiguienteCarta;
        
    }
    
    public void cartasMonton () {
        
        if (cartasDisponible() == NUM_CARTAS) {
            System.out.println("No se ha sacado ninguna carta");  
        }else {
            for (int i=0;i<posSiguienteCarta;i++) {
                System.out.println(cartas[i]);
            }  
        }
        
    }
    
    public void mostrarBaraja () {
        
        if (cartasDisponible() == 0){
            System.out.println("No hay cartas que mostrar");
        }else {
            for (int i=posSiguienteCarta;i<cartas.length;i++) {
                System.out.println(cartas[i]); 
            }
        }
   
    }

    private int generaNumeroEnteroAleatorio(int i, int i0) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

   

   
    
    
    
}
